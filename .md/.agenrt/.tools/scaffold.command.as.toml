# Filename: scaffold.toml
# Description: Scaffolds boilerplate for the ApexSigma workflow, including
#              services and webapp features with integrated documentation.

[command.scaffold.as]
prompt = """
# AI Agent Instructions: ApexSigma Project Scaffolder


## Objective

Your goal is to generate all the necessary boilerplate files for a new service or web feature based on the ApexSigma framework (`<type>`) and a given `<name>`.


**ARGUMENTS:** $ARGUMENTS (Format: `<type> <name>`, e.g., `service "MemOS"`)


---


### Phase 1: Input Validation and Setup


1.  **Parse Arguments:** Split the `$ARGUMENTS` into the `<type>` and the `<name>`.

2.  **Validate Input:** If two arguments are not provided, stop and display the correct usage:

    > "Usage: `gemini -c scaffold <type> <name>`\
Supported types: `service`, `webapp-feature`"

3.  **Prepare Naming Conventions:**

    * **PascalCase:** Convert `<name>` to `PascalCase` (e.g., "user auth" -> `UserAuth`).

    * **kebab-case:** Convert `<name>` to `kebab-case` (e.g., "user auth" -> `user-auth`).

    * **snake_case:** Convert `<name>` to `snake_case` (e.g., "user auth" -> `user_auth`).

    * **camelCase:** Convert `<name>` to `camelCase` (e.g., "user auth" -> `userAuth`).


---


### Phase 2: Scaffold Boilerplate Files


Execute the file creation steps based on the provided `<type>`.


#### **Case 1: `service`**

* **Description:** Scaffolds a new Python microservice (`devenviro.as` style).

* **Action:** Create the following files in a new directory named `<kebab-case-name>/`.

* **`<kebab-case-name>/app/main.py`**:

    ```python

    from fastapi import FastAPI


    app = FastAPI(title="<PascalCaseName>Service")


    @app.get("/health", tags=["Monitoring"])

    def health_check():

        return {"status": "ok"}

    ```

* **`<kebab-case-name>/Dockerfile`**:

    ```dockerfile

    # Use an official Python runtime as a parent image

    FROM python:3.11-slim


    # Set the working directory

    WORKDIR /usr/src/app


    # Copy and install requirements

    COPY requirements.txt ./

    RUN pip install --no-cache-dir -r requirements.txt


    # Copy the rest of the application

    COPY ./app ./app


    # Run app

    CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

    ```

* **`<kebab-case-name>/requirements.txt`**:

    ```

    fastapi

    uvicorn[standard]

    ```

* **`<kebab-case-name>/.md/project.md`**:

    ```markdown

    # Project: <PascalCaseName> Service


    ## Overview

    (Describe the core responsibility of this service.)

    ```


#### **Case 2: `webapp-feature`**

* **Description:** Scaffolds a new feature in a Node.js monorepo.

* **Action:** Create the following files.

* **`packages/frontend/src/features/<camelCaseName>/<PascalCaseName>View.tsx`**:

    ```typescript

    import React from 'react';


    export const <PascalCaseName>View: React.FC = () => {

      return (

        <div>

          <h2><PascalCaseName> Feature</h2>

        </div>

      );

    };

    ```

* **`packages/backend/src/routes/<camelCaseName>.ts`**:

    ```typescript

    import { Router } from 'express';

    const router = Router();


    router.get('/api/<kebab-case-name>', (req, res) => {

      res.json({ message: 'Welcome to the <PascalCaseName> feature api' });

    });


    export default router;

    ```


#### **Default Case:**

* **Action:** If `<type>` is not recognized, report an error.

    > "Error: Scaffolding for type '`<type>`' is not supported."


---


### Phase 3: Finalization


1.  **Report Success:** Inform the user that the setup is complete.

2.  **List Created Files:** Provide a list of all the files that were successfully created.

"""
