"""
Test data factories for creating test objects.

This module provides factory functions for creating test data
with sensible defaults and easy customization.
"""

from typing import Dict, Any, Optional
from datetime import datetime, timezone
import uuid


def create_memo_data(
    memo_id: Optional[str] = None,
    title: Optional[str] = None,
    content: Optional[str] = None,
    author: Optional[str] = None,
    tags: Optional[list] = None,
    **kwargs
) -> Dict[str, Any]:
    """
    Create a memo data dictionary for tests with sensible defaults.
    
    Parameters:
    	memo_id (Optional[str]): Unique identifier; autogenerated UUID when omitted.
    	title (Optional[str]): Memo title; defaults to "Test Memo".
    	content (Optional[str]): Memo content; defaults to "Test content".
    	author (Optional[str]): Author identifier; defaults to "test-user".
    	tags (Optional[list]): List of tags; defaults to ["test"].
    	**kwargs: Additional fields to include in the returned dictionary.
    
    Returns:
    	memo (Dict[str, Any]): Dictionary representing a memo, including `id`, `title`, `content`, `author`, `tags`, `created_at`, and `updated_at`.
    """
    return {
        "id": memo_id or str(uuid.uuid4()),
        "title": title or "Test Memo",
        "content": content or "Test content",
        "author": author or "test-user",
        "tags": tags or ["test"],
        "created_at": datetime.now(timezone.utc).isoformat(),
        "updated_at": datetime.now(timezone.utc).isoformat(),
        **kwargs
    }


def create_user_data(
    user_id: Optional[str] = None,
    username: Optional[str] = None,
    email: Optional[str] = None,
    role: Optional[str] = None,
    **kwargs
) -> Dict[str, Any]:
    """
    Create a user data dictionary for tests with sensible defaults and optional overrides.
    
    Parameters:
        user_id (Optional[str]): Unique identifier; a UUID string is generated if not provided.
        username (Optional[str]): Username; defaults to "testuser".
        email (Optional[str]): Email address; defaults to "test@example.com".
        role (Optional[str]): User role; defaults to "user".
        **kwargs: Additional fields to include in the returned dictionary.
    
    Returns:
        Dict[str, Any]: A dictionary representing a user, including `id`, `username`, `email`, `role`, `created_at`, and any extra fields from `kwargs`.
    """
    return {
        "id": user_id or str(uuid.uuid4()),
        "username": username or "testuser",
        "email": email or "test@example.com",
        "role": role or "user",
        "created_at": datetime.now(timezone.utc).isoformat(),
        **kwargs
    }


def create_tag_data(
    tag_id: Optional[str] = None,
    name: Optional[str] = None,
    **kwargs
) -> Dict[str, Any]:
    """
    Create a dictionary representing tag test data.
    
    Parameters:
        tag_id (Optional[str]): Unique identifier; a UUID is generated if not provided.
        name (Optional[str]): Tag name; defaults to "test-tag".
        **kwargs: Additional fields to include in the returned dictionary.
    
    Returns:
        Dict[str, Any]: Tag data containing "id", "name", "created_at", and any provided extra fields.
    """
    return {
        "id": tag_id or str(uuid.uuid4()),
        "name": name or "test-tag",
        "created_at": datetime.now(timezone.utc).isoformat(),
        **kwargs
    }


def create_batch_memos(count: int, **kwargs) -> list:
    """
    Create a list of memo dictionaries for tests.
    
    Parameters:
        count (int): Number of memos to generate.
        **kwargs: Fields to include in every memo; these values override the factories' defaults.
    
    Returns:
        list: A list of memo data dictionaries.
    """
    return [
        create_memo_data(
            title=f"Test Memo {i+1}",
            **kwargs
        )
        for i in range(count)
    ]


def create_batch_users(count: int, **kwargs) -> list:
    """
    Create a list of user data dictionaries with sequential usernames and emails.
    
    Each item is produced with username "testuser{n}" and email "test{n}@example.com" where n starts at 1. Any additional keyword arguments are merged into every returned user dictionary.
    
    Parameters:
        count (int): Number of users to generate.
        **kwargs: Fields to include on each generated user.
    
    Returns:
        list: List of user data dictionaries.
    """
    return [
        create_user_data(
            username=f"testuser{i+1}",
            email=f"test{i+1}@example.com",
            **kwargs
        )
        for i in range(count)
    ]